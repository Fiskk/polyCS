Basics of gcc 

gcc is the GNU C Compiler.  It is most obviously used for compiling C code.
This will cover the very basics of the C compiler.  For more detailed instructions check the gcc man page by typing:

tylerj@fang:~>man gcc

The most basic compilation is:

tylerj@fang:~>gcc foo.c

where foo.c is the name of the program you are compiling.  This will create a
binary executable called a.out.  

But suppose you would rather call your program "foo".  Thats easy...

tylerj@fang:~>gcc foo.c -o foo

The -o option tells gcc to send the binary output of he compilation to thee file specified.  

Now another thing you might want to add is verbose warning messages.  This means that you will get more explicit warnings during your compilation.

tylerj@fang:~>gcc -g foo.c -o foo

Now you can do basic compilations, but what if you need to use dynamic libraries in your compliation.  For instance, under Solaris, you must link the socket and nsl libraries upon compilation.  Here we use the -l option.

tylerj@ubu:~>gcc -g socket_program_for_solaris.c -o foo -lnsl -lsocket

Basically, under solaris, and non-standard libraries must be linked.  Under FreeBSD and Linux this compilation would not be nessacary (and most likely won't work).

To add an include path to you compilation we use the -I option.  For example, to include header files from the current working directory we could do:

tylerj@fang:~>gcc -g foo.c -o foo -I.

It's really that easy!!

But what if i want another path.

tylerj@fang:~>gcc -g foo.c -o foo -I./myincludefile

Back to linking however, there will be times as you write larger programs, that you want to create your own libraries to link in.  You may just want to compile your code down to object code.  This is easier than it sounds.

tylerj@fang:~>gcc -c foo.c 

This will create the file foo.o.  Now lets create one more.

tylerj@fang:~>gcc -c bar.c

Keep in mind that several source files can be compiled together without this method.

tylerj@fang:~>gcc foo.c bar.c -o foobar

You can create archives of these object files using the ar command.

tylerj@fang:~>ar -r libMylibrary.a foo.o bar.o

To extract them use the -x option.  For more on this see the man page.

To link in an archive you do not need to use -l. Just place the name of the archive on the compilation line.

tylerj@fang:~>gcc -o foobar2 dogprog.c libMylibrary.a


One more quick pointer.  You can define macros on the command line at compile time using the -D option.  As in -DHAVE_THREADS or any macro you want.  Or if you want to assign a value to a macro you can do -DMAX_THREADS=20.

Before i conclude I will mention that it is very important to at least have a basic understanding of the compiler you are working with in order to program effectivly.  

